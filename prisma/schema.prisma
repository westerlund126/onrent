generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  first_name        String
  last_name         String?
  username          String              @unique
  email             String              @unique
  createdAt         DateTime            @default(now())
  password          String?
  businessAddress   String?
  businessName      String?
  phone_numbers     String?
  role              UserRole            @default(CUSTOMER)
  clerkUserId       String              @unique
  imageUrl          String?
  FittingSchedule   FittingSchedule[]
  Products          Products[]
  Rental            Rental[]
  RescheduleRequest RescheduleRequest[]
  Wishlist          Wishlist[]
}

model Products {
  id              Int               @id @default(autoincrement())
  name            String
  category        ProductCategory   @default(LAINNYA)
  createdAt       DateTime          @default(now())
  images          String[]
  description     String
  ownerId         Int
  owner           User              @relation(fields: [ownerId], references: [id])
  Rental          Rental[]
  VariantProducts VariantProducts[]
  Wishlist        Wishlist[]
}

model VariantProducts {
  id          Int      @id @default(autoincrement())
  size        String?
  color       String?
  price       Float
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  productsId  Int
  bustlength  Float?
  waistlength Float?
  length      Float?
  isRented    Boolean  @default(false)
  sku         String   @unique
  Rental      Rental[]
  products    Products @relation(fields: [productsId], references: [id])

  @@unique([size, color, bustlength, waistlength, length, productsId, sku])
}

model Wishlist {
  id         Int      @id @default(autoincrement())
  userId     Int
  createdAt  DateTime @default(now())
  productsId Int
  products   Products @relation(fields: [productsId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Rental {
  id               Int             @id @default(autoincrement())
  userId           Int
  rentalCode       String          @unique
  startDate        DateTime
  endDate          DateTime
  status           RentalStatus    @default(BELUM_LUNAS)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  productsId       Int
  variantProductId Int
  products         Products        @relation(fields: [productsId], references: [id])
  user             User            @relation(fields: [userId], references: [id])
  variantProduct   VariantProducts @relation(fields: [variantProductId], references: [id])
  Return           Return[]
  Tracking         Tracking[]
}

model Tracking {
  id        Int            @id @default(autoincrement())
  rentalId  Int
  status    TrackingStatus @default(RENTAL_ONGOING)
  updatedAt DateTime       @default(now())
  rental    Rental         @relation(fields: [rentalId], references: [id])
}

model Return {
  id         Int             @id @default(autoincrement())
  rentalId   Int
  returnDate DateTime
  condition  ReturnCondition @default(GOOD)
  createdAt  DateTime        @default(now())
  rental     Rental          @relation(fields: [rentalId], references: [id])
}

model FittingSchedule {
  id                Int                 @id @default(autoincrement())
  userId            Int
  date              DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  status            FittingStatus       @default(PENDING)
  user              User                @relation(fields: [userId], references: [id])
  RescheduleRequest RescheduleRequest[]
}

model RescheduleRequest {
  id            Int              @id @default(autoincrement())
  fittingId     Int
  userId        Int
  requestedDate DateTime
  reason        String?
  status        RescheduleStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  respondedAt   DateTime?
  fitting       FittingSchedule  @relation(fields: [fittingId], references: [id])
  user          User             @relation(fields: [userId], references: [id])
}

enum UserRole {
  CUSTOMER
  ADMIN
  OWNER
}

enum RentalStatus {
  BELUM_LUNAS
  LUNAS
  TERLAMBAT
  SELESAI
}

enum FittingStatus {
  PENDING
  CONFIRMED
  REJECTED
  COMPLETED
  CANCELED
  RESCHEDULED
}

enum TrackingStatus {
  RENTAL_ONGOING
  RETURN_PENDING
  RETURNED
  COMPLETED
}

enum ReturnCondition {
  GOOD
  DAMAGED
  LOST
}

enum RescheduleStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProductCategory {
  KEBAYA
  PAKAIAN_ADAT
  GAUN_PENGANTIN
  JARIK
  SELOP
  BESKAP
  SELENDANG
  LAINNYA
}