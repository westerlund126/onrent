generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String
  email             String              @unique
  password          String
  role              UserRole            @default(CUSTOMER)
  createdAt         DateTime            @default(now())
  phone             String
  businessName      String?
  businessAddress   String?
  Account           Account[]
  FittingSchedule   FittingSchedule[]
  Products          Products[]
  Rental            Rental[]
  RescheduleRequest RescheduleRequest[]
  Session           Session[]
  Wishlist          Wishlist[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Products {
  id        Int        @id @default(autoincrement())
  name      String
  category  String
  size      String?
  color     String?
  price     Float
  stock     Int
  createdAt DateTime   @default(now())
  images    String[]
  ownerId   Int
  owner     User       @relation(fields: [ownerId], references: [id])
  Rental    Rental[]
  Wishlist  Wishlist[]
}

model Wishlist {
  id         Int      @id @default(autoincrement())
  userId     Int
  createdAt  DateTime @default(now())
  productsId Int
  products   Products @relation(fields: [productsId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Rental {
  id         Int          @id @default(autoincrement())
  userId     Int
  startDate  DateTime
  endDate    DateTime
  status     RentalStatus @default(ACTIVE)
  createdAt  DateTime     @default(now())
  productsId Int
  products   Products     @relation(fields: [productsId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
  Return     Return[]
  Tracking   Tracking[]
}

model Tracking {
  id        Int            @id @default(autoincrement())
  rentalId  Int
  status    TrackingStatus @default(ORDER_RECEIVED)
  updatedAt DateTime       @default(now())
  rental    Rental         @relation(fields: [rentalId], references: [id])
}

model Return {
  id         Int             @id @default(autoincrement())
  rentalId   Int
  returnDate DateTime
  condition  ReturnCondition @default(GOOD)
  createdAt  DateTime        @default(now())
  rental     Rental          @relation(fields: [rentalId], references: [id])
}

model FittingSchedule {
  id                Int                 @id @default(autoincrement())
  userId            Int
  date              DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  status            FittingStatus       @default(PENDING)
  user              User                @relation(fields: [userId], references: [id])
  RescheduleRequest RescheduleRequest[]
}

model RescheduleRequest {
  id            Int              @id @default(autoincrement())
  fittingId     Int
  userId        Int
  requestedDate DateTime
  reason        String?
  status        RescheduleStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  respondedAt   DateTime?
  fitting       FittingSchedule  @relation(fields: [fittingId], references: [id])
  user          User             @relation(fields: [userId], references: [id])
}

enum UserRole {
  CUSTOMER
  ADMIN
  OWNER
}

enum RentalStatus {
  ACTIVE
  COMPLETED
}

enum FittingStatus {
  PENDING
  CONFIRMED
  REJECTED
  COMPLETED
  CANCELED
  RESCHEDULED
}

enum TrackingStatus {
  ORDER_RECEIVED
  RENTAL_ONGOING
  RETURN_PENDING
  COMPLETED
}

enum ReturnCondition {
  GOOD
  DAMAGED
  LOST
}

enum RescheduleStatus {
  PENDING
  APPROVED
  REJECTED
}
