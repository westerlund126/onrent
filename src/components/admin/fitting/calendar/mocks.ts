import type { TEventColor, IUser, IFittingSchedule } from 'types/fitting';
import { getCurrentSchedule } from 'utils/helpers';

// ================================== //

export const USERS_MOCK: IUser[] = [
  {
    id: 1,
    first_name: 'Leonardo',
    last_name: 'Ramos',
    username: 'leonardo.ramos',
    email: 'leonardo.ramos@example.com',
    createdAt: new Date('2024-01-15T10:00:00Z'),
    businessAddress: '123 Main St, SÃ£o Paulo, SP',
    businessName: 'Ramos Tailoring',
    phone_numbers: '+55 11 99999-1111',
    role: 'OWNER',
    clerkUserId: 'clerk_user_1',
    imageUrl: null,
  },
  {
    id: 2,
    first_name: 'Michael',
    last_name: 'Doe',
    username: 'michael.doe',
    email: 'michael.doe@example.com',
    createdAt: new Date('2024-02-10T14:30:00Z'),
    businessAddress: '456 Oak Ave, Rio de Janeiro, RJ',
    businessName: 'Doe Fashion Studio',
    phone_numbers: '+55 21 88888-2222',
    role: 'ADMIN',
    clerkUserId: 'clerk_user_2',
    imageUrl: null,
  },
  {
    id: 3,
    first_name: 'Alice',
    last_name: 'Johnson',
    username: 'alice.johnson',
    email: 'alice.johnson@example.com',
    createdAt: new Date('2024-03-05T09:15:00Z'),
    phone_numbers: '+55 11 77777-3333',
    role: 'CUSTOMER',
    clerkUserId: 'clerk_user_3',
    imageUrl: null,
  },
  {
    id: 4,
    first_name: 'Robert',
    last_name: 'Smith',
    username: 'robert.smith',
    email: 'robert.smith@example.com',
    createdAt: new Date('2024-04-12T16:45:00Z'),
    phone_numbers: '+55 11 66666-4444',
    role: 'CUSTOMER',
    clerkUserId: 'clerk_user_4',
    imageUrl: null,
  },
  {
    id: 5,
    first_name: 'Maria',
    last_name: 'Silva',
    username: 'maria.silva',
    email: 'maria.silva@example.com',
    createdAt: new Date('2024-05-20T11:30:00Z'),
    businessAddress: '789 Fashion Blvd, Belo Horizonte, MG',
    businessName: 'Silva Atelier',
    phone_numbers: '+55 31 55555-5555',
    role: 'OWNER',
    clerkUserId: 'clerk_user_5',
    imageUrl: null,
  },
];


const COLORS: TEventColor[] = ["blue", "green", "red", "yellow", "purple", "orange", "gray"];

const EVENTS = [
  "Doctor's appointment",
  "Dental cleaning",
  "Eye exam",
  "Therapy session",
  "Business meeting",
  "Team stand-up",
  "Project deadline",
  "Weekly report submission",
  "Client presentation",
  "Marketing strategy review",
  "Networking event",
  "Sales call",
  "Investor pitch",
  "Board meeting",
  "Employee training",
  "Performance review",
  "One-on-one meeting",
  "Lunch with a colleague",
  "HR interview",
  "Conference call",
  "Web development sprint planning",
  "Software deployment",
  "Code review",
  "QA testing session",
  "Cybersecurity audit",
  "Server maintenance",
  "API integration update",
  "Data backup",
  "Cloud migration",
  "System upgrade",
  "Content planning session",
  "Product launch",
  "Customer support review",
  "Team building activity",
  "Legal consultation",
  "Budget review",
  "Financial planning session",
  "Tax filing deadline",
  "Investor relations update",
  "Partnership negotiation",
  "Medical check-up",
  "Vaccination appointment",
  "Blood donation",
  "Gym workout",
  "Yoga class",
  "Physical therapy session",
  "Nutrition consultation",
  "Personal trainer session",
  "Parent-teacher meeting",
  "School open house",
  "College application deadline",
  "Final exam",
  "Graduation ceremony",
  "Job interview",
  "Internship orientation",
  "Office relocation",
  "Business trip",
  "Flight departure",
  "Hotel check-in",
  "Vacation planning",
  "Birthday party",
  "Wedding anniversary",
  "Family reunion",
  "Housewarming party",
  "Community volunteer work",
  "Charity fundraiser",
  "Religious service",
  "Concert attendance",
  "Theater play",
  "Movie night",
  "Sporting event",
  "Football match",
  "Basketball game",
  "Tennis practice",
  "Marathon training",
  "Cycling event",
  "Fishing trip",
  "Camping weekend",
  "Hiking expedition",
  "Photography session",
  "Art workshop",
  "Cooking class",
  "Book club meeting",
  "Grocery shopping",
  "Car maintenance",
  "Home renovation meeting",
];

// This was generated by AI -- minus the part where I added my wedding as an "easter egg" :)
const mockGenerator = (numberOfEvents: number): IFittingSchedule[] => {
  const result: IFittingSchedule[] = [
    {
      id: 1204,
      userId: USERS_MOCK[0].id,
      fittingSlotId: 1,
      duration: 120, // 2 hours in minutes
      startTime: new Date('2025-09-20T00:00:00-03:00'),
      endTime: new Date('2025-09-20T23:59:00-03:00'),
      title: 'My wedding :)',
      color: 'red',
      note: "Can't wait to see the most beautiful woman in that dress!",
      createdAt: new Date(),
      updatedAt: new Date(),
      status: 'CONFIRMED',
      tfProofUrl: '',
      user: USERS_MOCK[0],
      fittingSlot: {
        id: 1,
        ownerId: USERS_MOCK[0].id,
        dateTime: new Date('2025-09-20T00:00:00-03:00'),
        // isAutoConfirm: true,
        isBooked: true,
        owner: USERS_MOCK[0],
      },
      FittingProduct: [], // Empty array for now
    },
  ];

  let currentId = 2; // Start from 2 since we used 1204 above

  // Date range: 30 days before and after now
  const now = new Date();
  const startRange = new Date(now);
  startRange.setDate(now.getDate() - 30);
  const endRange = new Date(now);
  endRange.setDate(now.getDate() + 30);

  // Create an event happening now
  const currentSchedule: IFittingSchedule = {
    id: currentId++,
    userId: USERS_MOCK[0].id,
    fittingSlotId: currentId,
    duration: 60, // 1 hour in minutes
    startTime: new Date(now.getTime() - 30 * 60000), // 30 minutes ago
    endTime: new Date(now.getTime() + 30 * 60000), // 30 minutes from now
    title: EVENTS[Math.floor(Math.random() * EVENTS.length)],
    color: COLORS[Math.floor(Math.random() * COLORS.length)],
    note: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
    createdAt: new Date(),
    updatedAt: new Date(),
    status: 'CONFIRMED',
    tfProofUrl: '',
    user: USERS_MOCK[Math.floor(Math.random() * USERS_MOCK.length)],
    fittingSlot: {
      id: currentId,
      ownerId: USERS_MOCK[0].id,
      dateTime: new Date(now.getTime() - 30 * 60000),
      // isAutoConfirm: true,
      isBooked: true,
      owner: USERS_MOCK[0],
    },
    FittingProduct: [],
  };

  // Only add the current event if it's not on September 20th
  if (now.getMonth() !== 8 || now.getDate() !== 20) {
    // Month is 0-indexed (8 = September)
    result.push(currentSchedule);
  }

  // Generate the remaining events
  let i = 0;
  let attempts = 0;
  const maxAttempts = numberOfEvents * 3; // Prevent infinite loop with a reasonable max attempts

  while (i < numberOfEvents - 1 && attempts < maxAttempts) {
    attempts++;

    // Determine if this is a multi-day event (10% chance)
    const isMultiDay = Math.random() < 0.1;

    const startDate = new Date(
      startRange.getTime() +
        Math.random() * (endRange.getTime() - startRange.getTime()),
    );

    // Skip if the date is September 20th
    if (startDate.getMonth() === 8 && startDate.getDate() === 20) {
      continue;
    }

    // Set time between 8 AM and 8 PM
    startDate.setHours(
      8 + Math.floor(Math.random() * 12),
      Math.floor(Math.random() * 4) * 15,
      0,
      0,
    );

    const endDate = new Date(startDate);

    if (isMultiDay) {
      // Multi-day event: Add 1-4 days
      const additionalDays = Math.floor(Math.random() * 4) + 1;
      endDate.setDate(startDate.getDate() + additionalDays);

      // Ensure multi-day events don't cross September 20th
      const endMonth = endDate.getMonth();
      const endDay = endDate.getDate();
      const startMonth = startDate.getMonth();
      const startDay = startDate.getDate();

      // Check if event spans across September 20th
      if (
        (startMonth === 8 &&
          startDay < 20 &&
          (endMonth > 8 || (endMonth === 8 && endDay >= 20))) ||
        (endMonth === 8 &&
          endDay >= 20 &&
          (startMonth < 8 || (startMonth === 8 && startDay < 20)))
      ) {
        continue;
      }

      endDate.setHours(
        8 + Math.floor(Math.random() * 12),
        Math.floor(Math.random() * 4) * 15,
        0,
        0,
      );
    } else {
      const durationMinutes = (Math.floor(Math.random() * 11) + 2) * 15; // 30 to 180 minutes, multiple of 15
      endDate.setTime(endDate.getTime() + durationMinutes * 60 * 1000);
    }

    const randomUser =
      USERS_MOCK[Math.floor(Math.random() * USERS_MOCK.length)];
    const durationInMinutes = Math.floor(
      (endDate.getTime() - startDate.getTime()) / (1000 * 60),
    );

    result.push({
      id: currentId++,
      userId: randomUser.id,
      fittingSlotId: currentId,
      duration: durationInMinutes,
      startTime: startDate, // Now using Date objects as per interface
      endTime: endDate, // Now using Date objects as per interface
      title: EVENTS[Math.floor(Math.random() * EVENTS.length)],
      color: COLORS[Math.floor(Math.random() * COLORS.length)],
      note: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
      createdAt: new Date(),
      updatedAt: new Date(),
      status: ['PENDING', 'CONFIRMED', 'REJECTED', 'COMPLETED', 'CANCELED'][
        Math.floor(Math.random() * 5)
      ] as IFittingSchedule['status'],
      tfProofUrl: '',
      user: randomUser,
      fittingSlot: {
        id: currentId,
        ownerId: randomUser.id,
        dateTime: startDate,
        // isAutoConfirm: Math.random() > 0.5,
        isBooked: true,
        owner: randomUser,
      },
      FittingProduct: [], // Empty array for now
    });

    i++;
  }

  return result;
};

export const CALENDAR_ITEMS_MOCK: IFittingSchedule[] = mockGenerator(80);
